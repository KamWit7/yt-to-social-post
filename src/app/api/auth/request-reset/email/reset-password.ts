import { safeEnv } from '@/lib/env/validate-env'
import nodemailer from 'nodemailer'

const resetPasswordEmailTemplate = (resetUrl: string) => `
  <div style="font-family:Arial,Helvetica,sans-serif;line-height:1.6;color:#222">
    <h2 style="color:#0d6efd;">ğŸ”’ Zresetuj swoje hasÅ‚o</h2>
    <p>CzeÅ›Ä‡,</p>
    <p>OtrzymaliÅ›my proÅ›bÄ™ o zresetowanie Twojego hasÅ‚a. Kliknij poniÅ¼szy przycisk, aby ustawiÄ‡ nowe hasÅ‚o:</p>
    <a href="${resetUrl}" 
       style="display:inline-block;background:#0d6efd;color:#fff;padding:10px 16px;border-radius:6px;text-decoration:none;font-weight:bold;">
       Zresetuj hasÅ‚o
    </a>
    <p>Ten link jest waÅ¼ny przez <b>1 godzinÄ™</b>. JeÅ¼eli to nie Ty, po prostu zignoruj tÄ™ wiadomoÅ›Ä‡.</p>
    <hr style="margin-top:20px;">
    <p style="font-size:12px;color:#555;">Â© ${new Date().getFullYear()} YT Scribe</p>
  </div>
`

export async function sendResetPasswordEmial({
  email,
  resetUrl,
}: {
  email: string
  resetUrl: string
}) {
  const html = resetPasswordEmailTemplate(resetUrl)

  const transporter = nodemailer.createTransport(
    {
      service: 'gmail',
      auth: {
        user: safeEnv.EMAIL_USER,
        pass: safeEnv.EMAIL_PASSWORD,
      },
      tls: {
        rejectUnauthorized: safeEnv.NODE_ENV === 'production' ? true : false,
      },
    },
    {
      dnsTimeout: 10000,
    }
  )

  try {
    await transporter.sendMail({
      from: safeEnv.EMAIL_USER,
      to: email,
      subject: 'Reset hasÅ‚a',
      html,
    })
  } catch (error) {
    console.error('Error sending email:', error)
    throw error
  }
}
