### YouTube Transcript API Tests
### REST Client for VS Code

@baseUrl = http://localhost:3001
@youtubeUrlWithoutTranscript = https://www.youtube.com/watch?v=GhVVi2R-K5k&ab_channel=Przeprogramowani
@youtubeUrlWithTranscript = https://www.youtube.com/watch?v=dh6BCSzaF6g&ab_channel=ThePrimeTime

### Health Check
GET {{baseUrl}}/api/health
Content-Type: application/json


Content-Type: application/json

###

### Without Transcript
GET {{baseUrl}}/api/transcript?url={{youtubeUrlWithoutTranscript}}
Content-Type: application/json


### With Transcript
GET {{baseUrl}}/api/transcript?url={{youtubeUrlWithTranscript}}
Content-Type: application/json

### With Invalid URL
GET {{baseUrl}}/api/transcript?url=https://google.com
Content-Type: application/json

### With Missing URL
GET {{baseUrl}}/api/transcript
Content-Type: application/json

### Case Sensitive Routes
GET {{baseUrl}}/api/Transcript/
Content-Type: application/json



### AI Processing Tests

### Process Transcript - Positive Case
POST {{baseUrl}}/api/ai/process-transcript
Content-Type: application/json

{
  "transcript": "Introduction & Workflow Updates\n[Music]\n[Applause]\nHi, welcome to another video. So, I covered my AI coding workflow about 3 months back. However, I have changed some things here and there and I thought I'd talk about these things as well and what I have been using lately. Let's start with the basics which is what I use for mockups.\n\nUI & Mockup Tools (Excalidraw, Figma, Stitch)\nNow, I do think that mockups are the best way to get the UIs you want. Otherwise, the UI often remains pretty bad or not as consistent.\n\nSo, I use Excal for super basic mockups when I can't do proper UI designs. This comes in handy for that. While I also use Figma for proper UI designs and more detailed stuff.\n\nAnother thing I have been using a bit these days is Stitch for UI design. It's quite good, though it gets a bit tricky with complex designs, but it's still great for UI components that you can then take and put into your AI coder and ask it to do the rest for you. You can also use tools like super design, which is also fine. Now, that covers the UI parts, but there's also the main coder.\n\nVS Code AI Coders (KiloCode, RooCode)\nSo, there's a coder in VS Code and one for the terminal. In VS Code, I've been using Kilo Code these days. It's good. It doesn't cost me open router fees, and it has all kinds of models. Plus, if you're new, you get $20 of free credits, and they keep running promotions where you get even more. So, you can check that out.\n\nI also use root code when I want to use some specific models or settings. Then I use it with requesty as the provider because there are a ton of things I can set up there and it's a bit faster than open router and also costs less.\n\nYou can also override prompts there and more. You can check out my previous workflow video where I covered it in depth.\n\nAnyway, now let's talk about the terminal coding agent that I use as well. So, I don't use claw code. That's because I don't like being stuck with just a proprietary thing that I can't configure and it doesn't make sense for me to use sonnet at all times.\n\nTerminal Coding Agents (OpenCode vs Claude Code)\nTheir clawed code membership is also now quite limited and I'd rather use different models for different tasks.\n\nSo, I've been using open code these days and it is pretty good. Like, it's really good. It's super fast, has a very low memory footprint and you don't have to worry when you are running multiple open code instances or anything like that.\n\nSo, I have been using that with Kimmy K2 and it works amazingly well for me. Plus, it's super cheap. I'd recommend you give this a try as well because it's a pretty good one. Also, many people ask me what I use as a super agent. Well, I use my Ninja by Ninja.\n\nSuper Agent Overview (My Ninja by NinjaTech AI)\nNinjette AI is put together by a bunch of Ex Google, Meta, and AWS folks. So, there's some serious experience behind it. I've been using it because you get access to all kinds of 25 plus models and their new super agent feature which is what I use the most. You just log in and right away you get this super clean minimalist interface. There's a main dashboard where you can pick from deep research, fast search, coding, writing, image generation, and even video stuff.\n\nBut what I use the most is the super ninja which is located at the top right where you can see the super ninja option in here. You can easily ask it to do almost anything and it can handle that. It integrates all kinds of things like data analysis, vibe coding and everything in one.\n\nSo you can give it a ton of data and it can analyze that for you or you can also ask it to create websites, slides, spreadsheets, PDF documents, word documents and more.\n\nIt can also do deep research on any topic as well. So like here I can give it this benchmark Excel sheet and ask it to visualize it in a neat little dashboard and it will just go ahead and build that up for me which we can view here. It's quite awesome. You can use it for research and almost anything. Apart from this, you already have the general stuff like access to multiple AI models which is actually insanely good for comparing which model gives you the better answer.\n\nThere is also advanced image generation. You can create superdetailed images. Edit them in real time. There's also a prompt library with over 400 curated queries, which is pretty good if you're stuck or just want to see what's possible.\n\nI mean, I liked it and that's why I have been using it moving forward.\n\nFramework & Stack Setup (NextJS, Expo, Better T Stack)\nNow, let's talk about the framework that I use. So I mostly use Nex.js for web and Expo for mobile apps. Both are Reactbased which is what most AI is good at. So that works well. Now that is great but I don't just use Next. There's also backend database and more. So I used to use T3 stack but there were some things in that that I just didn't use. Like I never used TRPC and stuff like that.\n\nNow setting everything up in a basic Nex.js project is a bit tedious and what makes it easy for me is better tstack. This basically allows you to create your own stack manually.\n\nSo what I can do here is come to the better tstack site, name my project and then select what my project needs to have. For example, in front end I use next. Then for native front end I select nothing.\n\nThen for backend I like to use convex. It is also the database and everything packaged into one and it's super fast and open source as well. So I use that and selecting this will disable the other database options because convex has all that in itself. You can also select web deploy and o for package manager. I have shifted to bun because it's faster and better than npm. You can also select an example app like an AI SDK app or a to-do list app as well as if you want git and if you want to automatically install these packages at setup.\n\nNow this will give you the command here that you can just copy and paste and it will create the project for you with all these configs.\n\nThis is a pretty good savior as you get what you want and it works well. It doesn't have some integrations like instant DB is not here but still you can just keep it as blank and then add it manually.\n\nSo this is a pretty good one as well. That is mainly about the stuff that I have been using. It was the stuff that I was using and it is all pretty good to use. There are some things like this better tea stack which I can't show in a proper video because it's not really AI related.\n\nbut it's better nonetheless. Go ahead and use it all you want. Overall, it's pretty cool. Anyway, share your thoughts below and subscribe to the channel. You can also donate via Superthanks option or join the channel as well and get some perks. I'll see you in the next video. Bye.\n[Music]",
  "purpose": "social_media",
  "customPurpose": "Post na Instagram",
  "options": {
    "generateSocialPost": true
  }
}

### Process Transcript - Minimal Required Fields
POST {{baseUrl}}/api/ai/process-transcript
Content-Type: application/json

{
  "transcript": "Kr√≥tka transkrypcja do przetworzenia.",
  "purpose": "summary"
}

### Process Transcript - Missing Transcript (Error Case)
POST {{baseUrl}}/api/ai/process-transcript
Content-Type: application/json

{
  "purpose": "social_media"
}

### Process Transcript - Missing Purpose (Error Case)
POST {{baseUrl}}/api/ai/process-transcript
Content-Type: application/json

{
  "transcript": "Transkrypcja bez celu przetwarzania."
}


###  Get Dictionary

GET {{baseUrl}}/api/dictionary?code=purpose
Content-Type: application/json
