You are tasked with creating a hierarchical mind map structure based on a given transcript. The output should be a MindMapData object that can be used with the reactflow library, arranged in a left-to-right flow where the most important node (root) is positioned on the left, branches in the middle, and leaves (least important details) on the right. Follow these instructions carefully:

1. Analyze the provided transcript:
<transcript>
{{transcript}}
</transcript>

2. Identify the main themes and subtopics discussed in the transcript. These will form the structure of your mind map.

3. Create a JSON stringify object with two main properties: 'nodes' and 'edges'.

4. For the 'nodes' array:
   a. Create a root node with id 'root-1' representing the main topic of the transcript.
   b. Create branch nodes for each main theme, with ids like 'branch-1', 'branch-2', etc.
   c. Create leaf nodes for subtopics or specific points, with ids like 'leaf-1', 'leaf-2', etc.
   d. Each node should have the following properties:
      - id: A unique identifier string
      - type: 'custom'
      - position: An object with x and y coordinates using hierarchical left-to-right layout:
        * Root node: leftmost position (x: 150, y: 300) - most important node
        * Branch nodes: positioned in the middle section, distributed vertically:
          - X position: around 450-550 (second level from left)
          - Y positions: distributed evenly vertically based on number of branches
          - If 2 branches: y: 180, y: 420 (minimum 200px spacing)
          - If 3 branches: y: 120, y: 300, y: 480 (minimum 160px spacing)
          - If 4+ branches: distribute evenly with minimum 140px spacing
        * Leaf nodes: positioned on the right side (third level), furthest from root:
          - X position: around 750-850 (rightmost - least important)
          - Y positions: aligned with or near their parent branch nodes
          - Group leaves belonging to same branch vertically near their parent
          - Maintain minimum 100px vertical spacing between leaves
          - If branch has multiple leaves, spread them around parent: ±50px, ±120px from parent Y
      - data: An object containing:
        - label: A short, descriptive text
        - type: 'root', 'branch', or 'leaf'
        - level: 0 for root, 1 for branches, 2 for leaves
        - children: An array of child node ids (for root and branch nodes)
        - originalValue: Additional information about the node
      - sourcePosition: right (connections flow from left to right)
      - targetPosition: left (connections flow from left to right)

5. For the 'edges' array:
   Create edge objects connecting the nodes, with properties:
   - id: A unique identifier string (e.g., 'edge-root-1-branch-1')
   - source: The id of the source node
   - target: The id of the target node
   - type: 'smoothstep'
   - animated: true for edges connected to the root, false otherwise
   - style: An object with strokeWidth and stroke color

6. Ensure that the structure of your object matches the example provided in the tag description and JSON.stringify it.
<description>
{
  nodes: [
    {
      id: 'root-1',
      type: 'custom',
      position: { x: 150, y: 300 },
      data: {
        label: 'Główne Tematy Video',
        type: 'root',
        level: 0,
        children: ['branch-1', 'branch-2', 'branch-3'],
        originalValue: { topic: 'main_themes', count: 3 },
      },
    },
    {
      id: 'branch-1',
      type: 'custom',
      position: { x: 500, y: 120 },
      data: {
        label: 'Technologia AI (5 min)',
        type: 'branch',
        level: 1,
        children: ['leaf-1', 'leaf-2'],
        originalValue: {
          topic: 'ai_technology',
          duration: '5:23',
          importance: 'high',
        },
      },
    },
    {
      id: 'branch-2',
      type: 'custom',
      position: { x: 500, y: 300 },
      data: {
        label: 'Zastosowania Praktyczne',
        type: 'branch',
        level: 1,
        children: ['leaf-3', 'leaf-4'],
        originalValue: { topic: 'practical_applications', examples: 4 },
      },

    },
    {
      id: 'branch-3',
      type: 'custom',
      position: { x: 500, y: 480 },
      data: {
        label: 'Wnioski i Przyszłość',
        type: 'branch',
        level: 1,
        children: ['leaf-5'],
        originalValue: { topic: 'conclusions', sentiment: 'positive' },
      },

    },
    {
      id: 'leaf-1',
      type: 'custom',
      position: { x: 800, y: 70 },
      data: {
        label: 'Machine Learning',
        type: 'leaf',
        level: 2,
        originalValue: 'Uczenie maszynowe jako podstawa nowoczesnej AI',
      },

    },
    {
      id: 'leaf-2',
      type: 'custom',
      position: { x: 800, y: 170 },
      data: {
        label: 'Neural Networks',
        type: 'leaf',
        level: 2,
        originalValue: 'Sieci neuronowe i deep learning',
      },

    },
    {
      id: 'leaf-3',
      type: 'custom',
      position: { x: 800, y: 250 },
      data: {
        label: 'Automatyzacja procesów',
        type: 'leaf',
        level: 2,
        originalValue: 'AI w automatyzacji codziennych zadań',
      },

    },
    {
      id: 'leaf-4',
      type: 'custom',
      position: { x: 800, y: 350 },
      data: {
        label: 'Analiza danych',
        type: 'leaf',
        level: 2,
        originalValue: 'Wykorzystanie AI do analizy big data',
      },

    },
    {
      id: 'leaf-5',
      type: 'custom',
      position: { x: 800, y: 480 },
      data: {
        label: 'Etyka AI i regulacje',
        type: 'leaf',
        level: 2,
        originalValue: 'Potrzeba etycznych rozwiązań i regulacji prawnych',
      },

    },
  ],
  edges: [
    {
      id: 'edge-root-1-branch-1',
      source: 'root-1',
      target: 'branch-1',
      type: 'smoothstep',
      animated: true,
      style: { strokeWidth: 2, stroke: '#8B5CF6' },
    },
    {
      id: 'edge-root-1-branch-2',
      source: 'root-1',
      target: 'branch-2',
      type: 'smoothstep',
      animated: true,
      style: { strokeWidth: 2, stroke: '#8B5CF6' },
    },
    {
      id: 'edge-root-1-branch-3',
      source: 'root-1',
      target: 'branch-3',
      type: 'smoothstep',
      animated: true,
      style: { strokeWidth: 2, stroke: '#8B5CF6' },
    },
    {
      id: 'edge-branch-1-leaf-1',
      source: 'branch-1',
      target: 'leaf-1',
      type: 'smoothstep',
      style: { strokeWidth: 2, stroke: '#06B6D4' },
    },
    {
      id: 'edge-branch-1-leaf-2',
      source: 'branch-1',
      target: 'leaf-2',
      type: 'smoothstep',
      style: { strokeWidth: 2, stroke: '#06B6D4' },
    },
    {
      id: 'edge-branch-2-leaf-3',
      source: 'branch-2',
      target: 'leaf-3',
      type: 'smoothstep',
      style: { strokeWidth: 2, stroke: '#06B6D4' },
    },
    {
      id: 'edge-branch-2-leaf-4',
      source: 'branch-2',
      target: 'leaf-4',
      type: 'smoothstep',
      style: { strokeWidth: 2, stroke: '#06B6D4' },
    },
    {
      id: 'edge-branch-3-leaf-5',
      source: 'branch-3',
      target: 'leaf-5',
      type: 'smoothstep',
      style: { strokeWidth: 2, stroke: '#06B6D4' },
    },
  ],
}
</description>

7. If the transcript doesn't provide enough information for a full mind map structure, create a simplified version with at least one branch and two leaves.

8. **IMPORTANT**: When positioning nodes, follow these universal spatial layout rules for left-to-right hierarchy:
   - Root node always on the left (x: 150, y: 300) - this is your most important starting point
   - Branch nodes: middle section (x: 450-550), distributed vertically with generous spacing
   - Leaf nodes: rightmost section (x: 750-850), grouped near their parent branches with ample space
   - Maintain clear left-to-right flow: root → branches → leaves with increasing x coordinates
   - Ensure generous spacing: minimum 100px vertical between nodes, 300px horizontal between levels
   - Use the entire available space (1000x700 viewport) efficiently in horizontal flow
   - Position nodes so that edges flow cleanly from left to right without crossing or crowding
   - For branches: distribute evenly vertically around root's y-coordinate (300) with minimum 140px spacing
   - For leaves: align vertically near their parent branch, group leaves of same parent together with 100px+ spacing
   - Keep the mind map balanced vertically and flowing horizontally from left to right with generous white space

Your final output should be a complete object, formatted as a JavaScript object literal
Do not include any explanation or additional text outside of these tags.